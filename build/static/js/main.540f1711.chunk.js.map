{"version":3,"sources":["auth/auth0-provider-with-history.js","components/Node.js","services/nodeService.js","services/gridService.js","services/styleService.js","components/LoginButton.js","components/LogoutButton.js","components/AuthenticationButton.js","components/GridInterface/AlgorithmSelector.js","services/Algorithms/astar.js","services/Algorithms/dijkstras.js","services/algorithmService.js","components/GridInterface/GridInterfaceButtons.js","components/GridInterface/GridInterfaceWeightedNodes.js","components/GridInterface/GridInterface.js","services/eventHandlers/PathFindingVisualizerHandler.js","components/PathFindingVisualizer.js","App.js","index.js"],"names":["Auth0ProviderWithHistory","children","history","useHistory","domain","process","clientId","redirectUri","window","location","origin","onRedirectCallback","appState","push","returnTo","pathname","audience","Node","row","col","isStart","isEnd","isWall","isVisited","isSolved","isWeighted","onMouseDown","onMouseEnter","onMouseUp","id","className","createNode","START_ROW","START_COL","END_ROW","END_COL","wallHandler","grid","setGrid","setTimeout","newGrid","slice","node","newNode","weightedNodeHandler","removeWeightedNodes","visitedNodesInQue","document","querySelectorAll","i","length","classList","remove","map","animateShortestPath","path","currentNode","getElementById","moveNode","previousNode","value","oldNode","solveMazeHandler","startNode","endNode","algorithm","resetPreviousMazeHandler","visitedNodes","visitedNode","inQue","animateVisitedNodes","removeVisitedNodesInQue","removeSolvedNodes","resetBeginningNodes","setStartNode","setEndNode","getInitialStartNodeDimensions","getInitialEndNodeDimensions","solvedNodes","body","html","documentElement","getRows","height","Math","max","scrollHeight","offsetHeight","clientHeight","floor","getCols","width","scrollWidth","offsetWidth","clientWidth","ROWS","COLS","MIDDLE_ROW","MIDDLE_COL","generateGrid","j","gridContainerStyle","display","gridTemplateColumns","gridTemplateRows","margin","LoginButton","loginWithRedirect","useAuth0","onClick","LogoutButton","logout","AuthenticationButton","isAuthenticated","AlgorithmSelector","handleAlgorithmChange","InputLabel","style","color","Select","renderValue","labelId","onChange","e","MenuItem","this","toString","distanceFromStart","Infinity","estimatedDistanceToEnd","cameFrom","aStarAlgorithm","startRow","startCol","endRow","endCol","graph","nodes","entries","initializeNodes","calculateManhattanDistance","nodesToVisit","MinHeap","isEmpty","currentMinDistanceNode","neighbors","getNeighboringNodes","neighbor","tentativeDistanceToNeighbor","containsNode","update","insert","reconstructPath","currentRow","currentCol","abs","numRows","numCols","reverse","array","nodePositionsInHeap","reduce","obj","heap","buildHeap","currentIdx","siftDown","endIdx","childOneIdx","childTwoIdx","idxToSwap","swap","parentIdx","pop","siftUp","temp","dijkstrasAlgorithm","distance","weight","unexploredNodes","neighbours","getNeighbouringNodes","neighbour","updateNeighbourDistance","tempNode","currentNeighbourDistance","aStar","dijkstras","endNodeRow","endNodeCol","GridInterfaceButtons","resetMazeHandler","Button","variant","getAlgorithmFunction","GridInterfaceWeightedNodes","FormGroup","FormControlLabel","textColor","control","Checkbox","label","gridInterfaceStyle","border","position","backgroundColor","opacity","top","GridInterface","weightedNode","setWeightedNode","setAlgorithm","event","target","handleMouseEnter","mouseIsPressed","startNodeSelected","endNodeSelected","a","previousStartNode","PathFindingVisualizer","useState","setMousePressed","setStartNodeSelected","setEndNodeSelected","useEffect","rowIdx","colIdx","handleMouseDown","handleMouseUp","App","isLoading","ReactDOM","render"],"mappings":"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","file":"static/js/main.540f1711.chunk.js","sourcesContent":["import React from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {Auth0Provider} from '@auth0/auth0-react';\n\nconst Auth0ProviderWithHistory = ({children}) => {\n  const domain = process.env.REACT_APP_AUTH0_DOMAIN;\n  const clientId = process.env.REACT_APP_AUTH0_CLIENT_ID;\n  const audience = process.env.REACT_APP_AUTH0_AUDIENCE;\n\n  const history = useHistory();\n\n  const onRedirectCallback = (appState) => {\n    history.push(appState?.returnTo || window.location.pathname);\n  };\n\n  return (\n    <Auth0Provider\n      domain={domain}\n      clientId={clientId}\n      redirectUri={window.location.origin}\n      onRedirectCallback={onRedirectCallback}\n      audience={audience}\n    >\n      {children}\n    </Auth0Provider>\n  );\n};\n\nexport default Auth0ProviderWithHistory;\n","import React from 'react';\n\nimport '../grid.css';\n\nconst Node = ({row, col, isStart, isEnd, isWall, isVisited, isSolved,\n  isWeighted, onMouseDown, onMouseEnter, onMouseUp}) => {\n  const getExtraClass = () => {\n    if (isStart) return 'start-node';\n    if (isEnd) return 'end-node';\n    if (isWeighted) return 'weighted-node';\n    if (isWall) return 'wall-node';\n    if (isSolved) return 'solved-node';\n    if (isVisited) return 'visited-node';\n    return '';\n  };\n\n  return (\n    <div id={`${row}-${col}`} className={`node ${getExtraClass()}`}\n      onMouseDown={() => onMouseDown(row, col)}\n      onMouseEnter={() => onMouseEnter(row, col)}\n      onMouseUp={() => onMouseUp()}\n    >\n    </div>\n  );\n};\n\nexport default Node;\n","import {generateGrid} from './gridService';\nimport {getInitialStartNodeDimensions,\n  getInitialEndNodeDimensions} from './gridService';\n\nexport const createNode = (row, col, START_ROW,\n    START_COL, END_ROW, END_COL) => {\n  return {\n    row: row,\n    col: col,\n    isStart: row == START_ROW && col == START_COL,\n    isEnd: row == END_ROW && col == END_COL,\n    isWall: false,\n    isVisited: false,\n    isSolved: false,\n    isWeighted: false,\n  };\n};\n\nexport const wallHandler = (row, col, grid, setGrid) => {\n  setTimeout(() => {\n    const newGrid = grid.slice();\n    const node = grid[row][col];\n    const newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[node.row][node.col] = newNode;\n    setGrid(newGrid);\n  }, 50);\n};\n\nexport const weightedNodeHandler = (row, col, grid, setGrid) => {\n  setTimeout(() => {\n    const newGrid = grid.slice();\n    const node = grid[row][col];\n    const newNode = {\n      ...node,\n      isWeighted: !node.isWeighted,\n    };\n    newGrid[node.row][node.col] = newNode;\n    setGrid(newGrid);\n  }, 50);\n};\n\nconst animateVisitedNodes =({path, visitedNodes}, grid) => {\n  for (let i = 0; i <= visitedNodes.length; i++) {\n    if (i == visitedNodes.length) {\n      setTimeout(() => {\n        animateShortestPath(path, grid);\n      }, 15 * i);\n      return;\n    }\n    setTimeout(() => {\n      const visitedNode = visitedNodes[i];\n      const currentNode = grid[visitedNode.row][visitedNode.col];\n      if (!currentNode.isStart && !currentNode.isEnd &&\n        !currentNode.isWeighted) {\n        if (!visitedNode.inQue) {\n          document\n              .getElementById(`${visitedNode.row}-${visitedNode.col}`)\n              .className = 'node visited-node';\n        } else {\n          document\n              .getElementById(`${visitedNode.row}-${visitedNode.col}`)\n              .className = 'node visited-node-in-que';\n        }\n      }\n    }, 15 * i);\n  }\n};\n\nexport const removeWeightedNodes = (grid) => {\n  const visitedNodesInQue = document.querySelectorAll('.weighted-node');\n  for (let i = 0; i < visitedNodesInQue.length; i++) {\n    visitedNodesInQue[i].classList.remove('weighted-node');\n  }\n  grid.map((row) => row.map((col) => {\n    col.isWeighted = false;\n  }));\n};\n\n\nconst animateShortestPath = (path, grid) => {\n  for (let i = 0; i < path.length; i++) {\n    const currentNode = grid[path[i][0]][path[i][1]];\n    setTimeout(() => {\n      if (!currentNode.isStart && !currentNode.isEnd) {\n        document\n            .getElementById(`${path[i][0]}-${path[i][1]}`)\n            .className = 'node solved-node';\n      }\n    }, 20 * i);\n  }\n};\n\nexport const moveNode = (previousNode, currentNode, value, grid, setGrid) => {\n  const newGrid = grid.slice();\n  // Start or end node\n  const oldNode = {\n    ...previousNode,\n    [value]: false,\n  };\n    // New start or end node\n  const newNode = {\n    ...currentNode,\n    [value]: true,\n  };\n    // newNode -> startNode\n  newGrid[currentNode.row][currentNode.col] = newNode;\n  newGrid[previousNode.row][previousNode.col] = oldNode;\n  setGrid(newGrid);\n};\n\nexport const solveMazeHandler = (grid, startNode, endNode, algorithm) => {\n  resetPreviousMazeHandler();\n  const visitedNodesInOrder = algorithm(startNode.row, startNode.col,\n      endNode.row, endNode.col, grid);\n  animateVisitedNodes(visitedNodesInOrder, grid);\n};\n\nexport const resetPreviousMazeHandler = () => {\n  // Removes visited nodes\n  const visitedNodes = document.querySelectorAll('.visited-node');\n  for (let i = 0; i < visitedNodes.length; i++) {\n    visitedNodes[i].classList.remove('visited-node');\n  }\n  removeVisitedNodesInQue();\n  removeSolvedNodes();\n};\n\nexport const resetMazeHandler = (setGrid, setStartNode, setEndNode) => {\n  // Removes visited nodes\n  const visitedNodes = document.querySelectorAll('.visited-node');\n  for (let i = 0; i < visitedNodes.length; i++) {\n    visitedNodes[i].classList.remove('visited-node');\n  }\n  removeVisitedNodesInQue();\n  removeSolvedNodes();\n  setGrid(generateGrid());\n  resetBeginningNodes(setStartNode, setEndNode);\n};\n\nconst removeVisitedNodesInQue = () => {\n  const visitedNodesInQue = document.querySelectorAll('.visited-node-in-que');\n  for (let i = 0; i < visitedNodesInQue.length; i++) {\n    visitedNodesInQue[i].classList.remove('visited-node-in-que');\n  }\n};\n\nconst resetBeginningNodes = (setStartNode, setEndNode) => {\n  setStartNode(getInitialStartNodeDimensions);\n  setEndNode(getInitialEndNodeDimensions);\n};\n\n// Removes the path of solved nodes\nconst removeSolvedNodes = () => {\n  const solvedNodes = document.querySelectorAll('.solved-node');\n  for (let i = 0; i < solvedNodes.length; i++) {\n    solvedNodes[i].classList.remove('solved-node');\n  }\n};\n","import {createNode} from './nodeService';\nconst body = document.body;\nconst html = document.documentElement;\n\nconst getHeight = () => {\n  const height = Math.max( body.scrollHeight, body.offsetHeight,\n      html.clientHeight, html.scrollHeight, html.offsetHeight );\n  return height;\n};\n\nconst getWidth = () => {\n  const width = Math.max( body.scrollWidth, body.offsetWidth,\n      html.clientWidth, html.scrollWidth, html.offsetWidth );\n  return width;\n};\n\nexport const getRows = () => {\n  const height = getHeight();\n  return Math.floor(height/ 30);\n};\n\nexport const getCols = () => {\n  const width = getWidth();\n  return Math.floor(width / 30);\n};\n\nconst ROWS = getRows();\nconst COLS = getCols();\nconst MIDDLE_ROW = Math.floor(ROWS / 2);\nconst MIDDLE_COL = Math.floor(COLS / 2);\nconst START_ROW = MIDDLE_ROW;\nconst START_COL = MIDDLE_COL - 5;\nconst END_ROW = MIDDLE_ROW;\nconst END_COL = MIDDLE_COL + 5;\n\nexport const getInitialStartNodeDimensions = () => {\n  return {row: START_ROW, col: START_COL};\n};\n\nexport const getInitialEndNodeDimensions = () => {\n  return {row: END_ROW, col: END_COL};\n};\n\n\nexport const generateGrid = () => {\n  const grid = [];\n  for (let i = 0; i < ROWS; i++) {\n    grid.push([]);\n    for (let j = 0; j < COLS; j++) {\n      grid[i].push(createNode(i, j, START_ROW, START_COL, END_ROW, END_COL));\n    }\n  }\n  return grid;\n};\n","import {getCols, getRows} from './gridService';\n\nexport const gridContainerStyle = {\n  display: 'grid',\n  gridTemplateColumns: `repeat(${getCols()}, 1fr)`,\n  gridTemplateRows: `repeat(${getRows()}, 1fr)`,\n  margin: 0,\n  height: '100%',\n  width: '100%',\n};\n","import React from 'react';\nimport {useAuth0} from '@auth0/auth0-react';\n\nconst LoginButton = () => {\n  const {loginWithRedirect} = useAuth0();\n  return (\n    <button\n      className=\"btn btn-primary btn-block\"\n      onClick={() => loginWithRedirect()}\n    >\n      Log In\n    </button>\n  );\n};\n\nexport default LoginButton;\n","import React from 'react';\nimport {useAuth0} from '@auth0/auth0-react';\n\nconst LogoutButton = () => {\n  const {logout} = useAuth0();\n  return (\n    <button\n      className=\"btn btn-danger btn-block\"\n      onClick={() =>\n        logout({\n          returnTo: window.location.origin,\n        })\n      }\n    >\n      Log Out\n    </button>\n  );\n};\n\nexport default LogoutButton;\n","import React from 'react';\n\nimport LoginButton from './LoginButton';\nimport LogoutButton from './LogoutButton';\n\nimport {useAuth0} from '@auth0/auth0-react';\n\nconst AuthenticationButton = () => {\n  const {isAuthenticated} = useAuth0();\n\n  return isAuthenticated ? <LogoutButton /> : <LoginButton />;\n};\n\nexport default AuthenticationButton;\n","import React from 'react';\nimport {Select, MenuItem,\n  InputLabel} from '@material-ui/core';\n\nconst AlgorithmSelector = ({algorithm, handleAlgorithmChange}) => {\n  return (\n    <div>\n      <InputLabel id=\"demo-simple-select-label\"\n        style={{color: 'white'}}>Algorithm</InputLabel>\n      <Select\n        renderValue={() => algorithm}\n        labelId=\"demo-simple-select-label\"\n        id=\"demo-simple-select\"\n        value={algorithm}\n        onChange={(e) => handleAlgorithmChange(e)}\n        style={{color: 'white'}}\n      >\n        <MenuItem value={'Dijkstras'}>dijkstras</MenuItem>\n        <MenuItem value={'aStar'}>aStar</MenuItem>\n      </Select>§\n    </div>\n  );\n};\n\nexport default AlgorithmSelector;\n","class Node {\n  constructor(row, col, isWall) {\n    this.id = row.toString() + '-' + col.toString();\n    this.row = row;\n    this.col = col;\n    this.isWall = isWall;\n    this.distanceFromStart = Infinity;\n    this.estimatedDistanceToEnd = Infinity;\n    this.cameFrom = null;\n    this.inQue = true;\n  }\n}\n\nexport default function aStarAlgorithm(startRow, startCol,\n    endRow, endCol, graph) {\n  // Write your code here.\n  const nodes = initializeNodes(graph);\n\n  const startNode = nodes[startRow][startCol];\n  const endNode = nodes[endRow][endCol];\n\n  startNode.distanceFromStart = 0;\n  startNode.estimatedDistanceToEnd =\n  calculateManhattanDistance(startNode, endNode);\n\n  const nodesToVisit = new MinHeap([startNode]);\n\n  while (!nodesToVisit.isEmpty()) {\n    const currentMinDistanceNode = nodesToVisit.remove();\n    currentMinDistanceNode.inQue = false;\n    if (currentMinDistanceNode === endNode) break;\n\n    const neighbors = getNeighboringNodes(currentMinDistanceNode, nodes);\n    for (const neighbor of neighbors) {\n      if (neighbor.isWall== 1) continue;\n      const tentativeDistanceToNeighbor =\n      currentMinDistanceNode.distanceFromStart + 1;\n\n      if (tentativeDistanceToNeighbor >= neighbor.distanceFromStart) continue;\n      neighbor.cameFrom = currentMinDistanceNode;\n      neighbor.distanceFromStart = tentativeDistanceToNeighbor;\n      neighbor.estimatedDistanceToEnd = tentativeDistanceToNeighbor +\n      calculateManhattanDistance(neighbor, endNode);\n\n      if (!nodesToVisit.containsNode(neighbor)) {\n        nodesToVisit.insert(neighbor);\n      } else {\n        nodesToVisit.update(neighbor);\n      }\n      // neighbor.value = 1;\n    }\n  }\n  return {path: reconstructPath(endNode),\n    visitedNodes: nodesToVisit.visitedNodes};\n}\n\nfunction initializeNodes(graph) {\n  const nodes = [];\n\n  for (const [i, row] of graph.entries()) {\n    nodes.push([]);\n    for (const [j, col] of row.entries()) {\n      const node = new Node(i, j, col.isWall);\n      nodes[i].push(node);\n    }\n  }\n  return nodes;\n}\n\nfunction calculateManhattanDistance(currentNode, endNode) {\n  const currentRow = currentNode.row;\n  const currentCol = currentNode.col;\n  const endRow = endNode.row;\n  const endCol = endNode.col;\n\n  return Math.abs(currentRow - endRow) + Math.abs(currentCol - endCol);\n}\n\nfunction getNeighboringNodes(node, nodes) {\n  const neighbors = [];\n\n  const numRows = nodes.length;\n  const numCols = nodes[0].length;\n\n  const row = node.row;\n  const col = node.col;\n\n  if (row < numRows - 1) {\n    // Down\n    neighbors.push(nodes[row + 1][col]);\n  }\n\n  if (row > 0) {\n    // UP\n    neighbors.push(nodes[row - 1][col]);\n  }\n\n  if (col < numCols - 1) {\n    // RIGHT\n    neighbors.push(nodes[row][col + 1]);\n  }\n\n  if (col > 0) {\n    // LEFT\n    neighbors.push(nodes[row][col -1]);\n  }\n\n  return neighbors;\n}\n\nfunction reconstructPath(endNode) {\n  if (endNode.cameFrom == null) return [];\n\n  let currentNode = endNode;\n  const path = [];\n\n  while (currentNode != null) {\n    path.push([currentNode.row, currentNode.col]);\n    currentNode = currentNode.cameFrom;\n  }\n\n  path.reverse();\n\n  return path;\n}\n\nclass MinHeap {\n  constructor(array) {\n    this.nodePositionsInHeap = array.reduce((obj, node, i) => {\n      obj[node.id] = i;\n      return obj;\n    }, {});\n    this.heap = this.buildHeap(array);\n    this.visitedNodes = [];\n  }\n\n  isEmpty() {\n    return this.heap.length == 0;\n  }\n\n  buildHeap(array) {\n    const firstParentIdx = Math.floor((array.length - 2) / 2);\n    for (let currentIdx = firstParentIdx; currentIdx >= 0; currentIdx--) {\n      this.siftDown(currentIdx, array.length - 1, array);\n    }\n    return array;\n  }\n\n  siftDown(currentIdx, endIdx, heap) {\n    let childOneIdx = currentIdx * 2 + 1;\n    while (childOneIdx <= endIdx) {\n      const childTwoIdx = currentIdx * 2 + 2 <= endIdx ?\n      currentIdx * 2 + 2 : -1;\n      let idxToSwap;\n      if (childTwoIdx !== -1 && heap[childTwoIdx].estimatedDistanceToEnd <\n        heap[childOneIdx].estimatedDistanceToEnd) {\n        idxToSwap = childTwoIdx;\n      } else {\n        idxToSwap = childOneIdx;\n      }\n      if (heap[idxToSwap].estimatedDistanceToEnd <\n        heap[currentIdx].estimatedDistanceToEnd) {\n        this.swap(currentIdx, idxToSwap, heap);\n        currentIdx = idxToSwap;\n        childOneIdx = currentIdx * 2 + 1;\n      } else {\n        return;\n      }\n    }\n  }\n\n  siftUp(currentIdx, heap) {\n    let parentIdx = Math.floor((currentIdx - 1) / 2);\n    while (currentIdx > 0 && heap[currentIdx].estimatedDistanceToEnd <\n        heap[parentIdx].estimatedDistanceToEnd) {\n      this.swap(currentIdx, parentIdx, heap);\n      currentIdx = parentIdx;\n      parentIdx = Math.floor((currentIdx - 1) / 2);\n    }\n  }\n\n  remove() {\n    if (this.isEmpty()) return;\n\n    this.swap(0, this.heap.length - 1, this.heap);\n    const node = this.heap.pop();\n    delete this.nodePositionsInHeap[node.id];\n    this.siftDown(0, this.heap.length - 1, this.heap);\n    return node;\n  }\n\n  insert(node) {\n    this.visitedNodes.push(node);\n    this.heap.push(node);\n    this.nodePositionsInHeap[node.id] = this.heap.length - 1;\n    this.siftUp(this.heap.length - 1, this.heap);\n  }\n\n  swap(i, j, heap) {\n    this.nodePositionsInHeap[this.heap[i].id] = j;\n    this.nodePositionsInHeap[this.heap[j].id] = i;\n    const temp = heap[j];\n    heap[j] = heap[i];\n    heap[i] = temp;\n  }\n\n  containsNode(node) {\n    return node.id in this.nodePositionsInHeap;\n  }\n\n  update(node) {\n    this.siftUp(this.nodePositionsInHeap[node.id], this.heap);\n  }\n}\n","export default function dijkstrasAlgorithm(startRow, startCol,\n    endRow, endCol, graph) {\n  const visitedNodes = [];\n  const nodes = initializeNodes(graph);\n\n  const startNode = nodes[startRow][startCol];\n  const endNode = nodes[endRow][endCol];\n\n  startNode.distance = 0;\n\n  const unexploredNodes = new MinHeap([startNode]);\n\n  while (!unexploredNodes.isEmpty()) {\n    const currentNode = unexploredNodes.remove();\n    currentNode.isVisited = true;\n    currentNode.inQue = false;\n\n    if (currentNode === endNode) {\n      return {path: reconstructPath(endNode).reverse(),\n        visitedNodes: visitedNodes};\n    }\n\n    const neighbours = getNeighbouringNodes(currentNode, nodes);\n\n    for (let i = 0; i < neighbours.length; i++) {\n      const neighbour = neighbours[i];\n      if (neighbour.isWall || neighbour.isVisited) continue;\n      updateNeighbourDistance(currentNode, neighbour, unexploredNodes,\n          visitedNodes);\n    }\n  }\n}\n\nfunction reconstructPath(node) {\n  const path = [];\n  let tempNode = node;\n\n  while (tempNode !== null) {\n    path.push([tempNode.row, tempNode.col]);\n    tempNode = tempNode.previousNode;\n  }\n  return path;\n}\n\nfunction updateNeighbourDistance(node, neighbour, unexploredNodes,\n    visitedNodes) {\n  const currentNeighbourDistance = node.distance + neighbour.weight;\n  if (currentNeighbourDistance < neighbour.distance) {\n    neighbour.distance = currentNeighbourDistance;\n    neighbour.previousNode = node;\n    if (unexploredNodes.containsNode(neighbour)) {\n      unexploredNodes.update(neighbour);\n    } else {\n      unexploredNodes.insert(neighbour);\n    }\n    visitedNodes.push(neighbour);\n  }\n}\n\nfunction getNeighbouringNodes(node, graph) {\n  const row = node.row;\n  const col = node.col;\n\n  const neighbours = [];\n\n  if (row > 0) {\n    neighbours.push(graph[row - 1][col]);\n  }\n\n  if (row < graph.length - 1) {\n    neighbours.push(graph[row + 1][col]);\n  }\n\n  if (col > 0) {\n    neighbours.push(graph[row][col - 1]);\n  }\n\n  if (col < graph[0].length - 1) {\n    neighbours.push(graph[row][col + 1]);\n  }\n  return neighbours;\n}\n\nfunction initializeNodes(graph) {\n  const nodes = [];\n  for (let i = 0; i < graph.length; i++) {\n    nodes.push([]);\n    for (let j = 0; j < graph[0].length; j++) {\n      const currentNode = graph[i][j];\n      const newNode = {\n        ...currentNode,\n        distance: Infinity,\n        previousNode: null,\n        weight: currentNode.isWeighted ? 5 : 1,\n        inQue: true,\n        id: currentNode.row.toString() + '-' + currentNode.col.toString(),\n      };\n      nodes[i].push(newNode);\n    }\n  }\n  return nodes;\n}\n\n\nclass MinHeap {\n  constructor(array) {\n    this.nodePositionsInHeap = array.reduce((obj, node, i) => {\n      obj[node.id] = i;\n      return obj;\n    }, {});\n    this.heap = this.buildHeap(array);\n    this.visitedNodes = [];\n  }\n\n  isEmpty() {\n    return this.heap.length == 0;\n  }\n\n  buildHeap(array) {\n    const firstParentIdx = Math.floor((array.length - 2) / 2);\n    for (let currentIdx = firstParentIdx; currentIdx >= 0; currentIdx--) {\n      this.siftDown(currentIdx, array.length - 1, array);\n    }\n    return array;\n  }\n\n  siftDown(currentIdx, endIdx, heap) {\n    let childOneIdx = currentIdx * 2 + 1;\n    while (childOneIdx <= endIdx) {\n      const childTwoIdx = currentIdx * 2 + 2 <= endIdx ?\n        currentIdx * 2 + 2 : -1;\n      let idxToSwap;\n      if (childTwoIdx !== -1 && heap[childTwoIdx].distance <\n          heap[childOneIdx].distance) {\n        idxToSwap = childTwoIdx;\n      } else {\n        idxToSwap = childOneIdx;\n      }\n      if (heap[idxToSwap].distance <\n          heap[currentIdx].distance) {\n        this.swap(currentIdx, idxToSwap, heap);\n        currentIdx = idxToSwap;\n        childOneIdx = currentIdx * 2 + 1;\n      } else {\n        return;\n      }\n    }\n  }\n\n  siftUp(currentIdx, heap) {\n    let parentIdx = Math.floor((currentIdx - 1) / 2);\n    while (currentIdx > 0 && heap[currentIdx].distance <\n          heap[parentIdx].distance) {\n      this.swap(currentIdx, parentIdx, heap);\n      currentIdx = parentIdx;\n      parentIdx = Math.floor((currentIdx - 1) / 2);\n    }\n  }\n\n  remove() {\n    if (this.isEmpty()) return;\n\n    this.swap(0, this.heap.length - 1, this.heap);\n    const node = this.heap.pop();\n    delete this.nodePositionsInHeap[node.id];\n    this.siftDown(0, this.heap.length - 1, this.heap);\n    return node;\n  }\n\n  insert(node) {\n    this.visitedNodes.push(node);\n    this.heap.push(node);\n    this.nodePositionsInHeap[node.id] = this.heap.length - 1;\n    this.siftUp(this.heap.length - 1, this.heap);\n  }\n\n  swap(i, j, heap) {\n    this.nodePositionsInHeap[this.heap[i].id] = j;\n    this.nodePositionsInHeap[this.heap[j].id] = i;\n    const temp = heap[j];\n    heap[j] = heap[i];\n    heap[i] = temp;\n  }\n\n  containsNode(node) {\n    return node.id in this.nodePositionsInHeap;\n  }\n\n  update(node) {\n    this.siftUp(this.nodePositionsInHeap[node.id], this.heap);\n  }\n}\n","import aStarAlgorithm from './Algorithms/astar';\nimport dijkstrasAlgorithm from './Algorithms/dijkstras';\n\nexport const aStar = (startRow, startCol, endRow, endCol, graph) => {\n  return aStarAlgorithm(startRow, startCol, endRow, endCol, graph);\n};\n\nexport const dijkstras = (startRow, startCol, endNodeRow, endNodeCol, grid) => {\n  return dijkstrasAlgorithm(startRow, startCol, endNodeRow, endNodeCol, grid);\n};\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport {aStar, dijkstras} from '../../services/algorithmService';\n\nconst getAlgorithmFunction = (algorithm) => {\n  if (algorithm === 'Dijkstras') return dijkstras;\n  if (algorithm === 'aStar') return aStar;\n};\n\nconst GridInterfaceButtons = ({algorithm,\n  solveMazeHandler, resetMazeHandler}) => {\n  return (\n    <div>\n      <Button\n        variant='contained'\n        color='primary'\n        onClick={() => solveMazeHandler(getAlgorithmFunction(algorithm))}\n        className=\"solve-maze-button\"\n      >\n            Solve\n      </Button>\n      <Button\n        variant='contained'\n        color='secondary'\n        onClick={() => resetMazeHandler()}\n        className=\"solve-maze-button\"\n      >\n              Reset\n      </Button>\n    </div>\n  );\n};\n\nexport default GridInterfaceButtons;\n","import React from 'react';\nimport {Checkbox, FormControlLabel, FormGroup} from '@material-ui/core';\n\nconst GridInterfaceWeightedNodes = ({weightedNodeHandler, algorithm}) => {\n  if (algorithm !== 'Dijkstras') {\n    return null;\n  }\n  return (\n    <div>\n      <FormGroup>\n        <FormControlLabel style={{color: 'white', textColor: 'white'}}\n          control={<Checkbox\n            style={{color: 'white', textColor: 'white'}}\n          />}\n          label=\"Weighted node\"\n          onChange={() => weightedNodeHandler()} />\n      </FormGroup>\n    </div>\n  );\n};\n\nexport default GridInterfaceWeightedNodes;\n","import React from 'react';\nimport Draggable from 'react-draggable';\n\nimport AuthenticationButton from '../AuthenticationButton';\nimport AlgorithmSelector from './AlgorithmSelector';\nimport GridInterfaceButtons from './GridInterfaceButtons';\nimport GridInterfaceWeightedNodes from './GridInterfaceWeightedNodes';\n\n// import Paper from '@mui/material/Paper';\n\nconst gridInterfaceStyle = {\n  height: 200,\n  width: 200,\n  border: '1px solid black',\n  position: 'absolute',\n  backgroundColor: 'black',\n  opacity: 0.7,\n  top: 0,\n};\n\nconst GridInterface = ({solveMazeHandler, resetMazeHandler,\n  weightedNode, setWeightedNode, removeWeightedNodes, algorithm,\n  setAlgorithm, grid}) => {\n  const handleAlgorithmChange = (event) => {\n    if (event.target.value !== 'Dijkstras') {\n      removeWeightedNodes(grid);\n    }\n    setAlgorithm(event.target.value);\n  };\n\n  const weightedNodeHandler = () => {\n    setWeightedNode(!weightedNode);\n  };\n\n  return (\n    <div>\n      <Draggable>\n        <div style={gridInterfaceStyle}>\n          <div style={{color: 'white'}}>\n        Hiteshs PathFindingVisualizer\n          </div>\n          <AlgorithmSelector\n            algorithm={algorithm}\n            handleAlgorithmChange={handleAlgorithmChange}\n          />\n          <AuthenticationButton />\n          <GridInterfaceButtons\n            algorithm={algorithm}\n            solveMazeHandler={solveMazeHandler}\n            resetMazeHandler={resetMazeHandler}\n          />\n          <GridInterfaceWeightedNodes\n            weightedNodeHandler={weightedNodeHandler} algorithm={algorithm}\n          />\n        </div>\n      </Draggable>\n    </div>\n  );\n};\n\nexport default GridInterface;\n","import {moveNode, wallHandler, weightedNodeHandler} from '../nodeService';\n\nexport const handleMouseDown = (row, col, grid, setGrid,\n    setMousePressed, setStartNodeSelected, setEndNodeSelected,\n    weightedNode) => {\n  const currentNode = grid[row][col];\n  setMousePressed(true);\n  // Check if start node is selected\n  if (currentNode.isStart) {\n    // setStartNode({row: row, col: col});\n    setStartNodeSelected(true);\n  } else if (currentNode.isEnd) {\n    setEndNodeSelected(true);\n  } else if (weightedNode) {\n    weightedNodeHandler(row, col, grid, setGrid);\n  } else {\n    wallHandler(row, col, grid, setGrid);\n  }\n};\n\nexport const handleMouseEnter = async (row, col, grid, setGrid, mouseIsPressed,\n    startNodeSelected, endNodeSelected,\n    setStartNode, startNode, setEndNode, endNode,\n    weightedNode) => {\n  if (!mouseIsPressed) return;\n  // Check if start node is selected\n  const currentNode = grid[row][col];\n  if (startNodeSelected) {\n    // replace the start node\n    const previousStartNode = grid[startNode.row][startNode.col];\n    moveNode(previousStartNode, currentNode, 'isStart', grid, setGrid);\n    setStartNode({row: row, col: col});\n  } else if (endNodeSelected) {\n    const previousNode = grid[endNode.row][endNode.col];\n    moveNode(previousNode, currentNode, 'isEnd', grid, setGrid);\n    setEndNode({row: row, col: col});\n  } else if (weightedNode) {\n    weightedNodeHandler(row, col, grid, setGrid);\n  } else {\n    wallHandler(row, col, grid, setGrid);\n  }\n};\n\nexport const handleMouseUp = (setStartNodeSelected, setEndNodeSelected,\n    setMousePressed) => {\n  setStartNodeSelected(false);\n  setEndNodeSelected(false);\n  setMousePressed(false);\n};\n","import React, {useEffect, useState} from 'react';\n\nimport Node from './Node';\nimport '../grid.css';\nimport {generateGrid,\n  getInitialStartNodeDimensions,\n  getInitialEndNodeDimensions,\n} from '../services/gridService';\nimport {gridContainerStyle} from '../services/styleService';\nimport GridInterface from './GridInterface/GridInterface';\nimport {solveMazeHandler,\n  resetMazeHandler, removeWeightedNodes} from '../services/nodeService';\nimport {handleMouseDown, handleMouseEnter,\n  handleMouseUp} from '../services/eventHandlers/PathFindingVisualizerHandler';\n\nconst PathFindingVisualizer = () => {\n  const [grid, setGrid] = useState(generateGrid());\n  const [mouseIsPressed, setMousePressed] = useState(false);\n  const [startNodeSelected, setStartNodeSelected] = useState(false);\n  const [startNode, setStartNode] = useState(getInitialStartNodeDimensions);\n  const [endNodeSelected, setEndNodeSelected] = useState(false);\n  const [endNode, setEndNode] = useState(getInitialEndNodeDimensions);\n  const [weightedNode, setWeightedNode] = useState(false);\n  const [algorithm, setAlgorithm] = useState('Dijkstras');\n\n  useEffect(() => {\n    if (algorithm !== 'Dijkstras') {\n      setWeightedNode(false);\n    }\n  }, [algorithm]);\n\n  return (\n    <div style={gridContainerStyle}>\n      { grid.map((row, rowIdx) => row.map((node, colIdx) => {\n        const {row, col, isStart, isEnd,\n          isWall, isVisited, isSolved, isWeighted} = node;\n        return (\n          <div key={`${rowIdx}-${colIdx}`}>\n            <Node\n              row={row}\n              col={col}\n              isStart={isStart}\n              isEnd={isEnd}\n              isWall={isWall}\n              isVisited={isVisited}\n              isSolved={isSolved}\n              mouseIsPressed={mouseIsPressed}\n              isWeighted={isWeighted}\n              onMouseDown={(row, col) => handleMouseDown(row, col, grid,\n                  setGrid, setMousePressed, setStartNodeSelected,\n                  setEndNodeSelected, weightedNode)}\n              onMouseEnter={(row, col) => handleMouseEnter(row, col, grid,\n                  setGrid, mouseIsPressed, startNodeSelected, endNodeSelected,\n                  setStartNode, startNode, setEndNode, endNode, weightedNode)}\n              onMouseUp={() => handleMouseUp(setStartNodeSelected,\n                  setEndNodeSelected, setMousePressed)}\n            />\n          </div>\n        );\n      }))}\n      <div>\n        <GridInterface\n          solveMazeHandler={(algorithm) => solveMazeHandler(grid, startNode,\n              endNode, algorithm)}\n          resetMazeHandler={() => resetMazeHandler(setGrid,\n              setStartNode, setEndNode)}\n          weightedNode={weightedNode}\n          setWeightedNode={setWeightedNode}\n          removeWeightedNodes={removeWeightedNodes}\n          algorithm={algorithm}\n          setAlgorithm={setAlgorithm}\n          grid={grid}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default PathFindingVisualizer;\n","import React from 'react';\n// import NavBar from './components/NavBar';\nimport PathFindingVisualizer from './components/PathFindingVisualizer';\n// import LoginButton from './components/LoginButton';\nimport {useAuth0} from '@auth0/auth0-react';\n\nfunction App() {\n  const {isLoading} = useAuth0();\n\n  if (isLoading) return <div>Loading...</div>;\n\n\n  return (\n    <PathFindingVisualizer />\n  );\n}\nexport default App;\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport Auth0ProviderWithHistory from './auth/auth0-provider-with-history';\nimport App from './App';\n\nReactDOM.render(\n    <Router>\n      <Auth0ProviderWithHistory>\n        <App />\n      </Auth0ProviderWithHistory>\n    </Router>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}