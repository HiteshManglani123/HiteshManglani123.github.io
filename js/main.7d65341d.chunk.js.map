{"version":3,"sources":["auth/auth0-provider-with-history.js","components/Loading.js","components/ProtectedRoute.js","components/Node.js","services/mazeService.js","services/nodeService.js","services/gridService.js","services/styleService.js","components/LoginButton.js","components/LogoutButton.js","components/AuthenticationButton.js","components/GridInterface/AlgorithmSelector.js","services/Algorithms/astar.js","services/Algorithms/dijkstras.js","services/algorithmService.js","components/GridInterface/GridInterfaceButtons.js","components/GridInterface/GridInterfaceWeightedNodes.js","components/GridInterface/GridInterface.js","services/eventHandlers/PathFindingVisualizerHandler.js","components/PathFindingVisualizer.js","components/Mazes.js","components/ViewSitch.js","App.js","index.js"],"names":["Auth0ProviderWithHistory","children","history","useHistory","domain","process","clientId","redirectUri","window","location","origin","onRedirectCallback","appState","push","returnTo","pathname","audience","Loading","className","src","alt","ProtectedRoute","component","args","withAuthenticationRequired","onRedirecting","Node","row","col","isStart","isEnd","isWall","isVisited","isSolved","isWeighted","onMouseDown","onMouseEnter","onMouseUp","id","baseUrl","saveMaze","usernameId","grid","accessToken","algorithm","a","mazeObject","mazeBoard","typeOfAlgorithm","config","headers","Authorization","axios","post","response","data","getMazesForUser","acessToken","get","createNode","START_ROW","START_COL","END_ROW","END_COL","wallHandler","setGrid","setTimeout","newGrid","slice","node","newNode","weightedNodeHandler","animateVisitedNodes","path","visitedNodes","i","length","animateShortestPath","visitedNode","currentNode","inQue","document","getElementById","removeWeightedNodes","visitedNodesInQue","querySelectorAll","classList","remove","map","moveNode","previousNode","value","oldNode","getAccessToken","getAccessTokenSilently","scope","solveMazeHandler","startNode","endNode","algorithmFunction","isAuthenticated","user","resetPreviousMazeHandler","visitedNodesInOrder","userId","sub","removeVisitedNodesInQue","removeSolvedNodes","resetBeginningNodes","setStartNode","setEndNode","getInitialStartNodeDimensions","getInitialEndNodeDimensions","solvedNodes","body","html","documentElement","getRows","height","Math","max","scrollHeight","offsetHeight","clientHeight","floor","getCols","width","scrollWidth","offsetWidth","clientWidth","ROWS","COLS","MIDDLE_ROW","MIDDLE_COL","generateGrid","j","gridContainerStyle","display","gridTemplateColumns","gridTemplateRows","margin","LoginButton","loginWithRedirect","useAuth0","onClick","LogoutButton","logout","AuthenticationButton","AlgorithmSelector","handleAlgorithmChange","InputLabel","style","color","Select","renderValue","labelId","onChange","e","MenuItem","this","toString","distanceFromStart","Infinity","estimatedDistanceToEnd","cameFrom","aStarAlgorithm","startRow","startCol","endRow","endCol","graph","nodes","entries","initializeNodes","calculateManhattanDistance","nodesToVisit","MinHeap","isEmpty","currentMinDistanceNode","neighbors","getNeighboringNodes","neighbor","tentativeDistanceToNeighbor","containsNode","update","insert","reconstructPath","currentRow","currentCol","abs","numRows","numCols","reverse","array","nodePositionsInHeap","reduce","obj","heap","buildHeap","currentIdx","siftDown","endIdx","childOneIdx","childTwoIdx","idxToSwap","swap","parentIdx","pop","siftUp","temp","dijkstrasAlgorithm","distance","weight","unexploredNodes","neighbours","getNeighbouringNodes","neighbour","updateNeighbourDistance","tempNode","currentNeighbourDistance","aStar","dijkstras","endNodeRow","endNodeCol","GridInterfaceButtons","resetMazeHandler","Button","variant","getAlgorithmFunction","GridInterfaceWeightedNodes","FormGroup","FormControlLabel","textColor","control","Checkbox","label","gridInterfaceStyle","border","position","backgroundColor","opacity","top","GridInterface","weightedNode","setWeightedNode","setAlgorithm","event","target","handleMouseEnter","mouseIsPressed","startNodeSelected","endNodeSelected","previousStartNode","PathFindingVisualizer","useState","setMousePressed","setStartNodeSelected","setEndNodeSelected","useEffect","rowIdx","colIdx","handleMouseDown","handleMouseUp","Mazes","isLoading","mazes","setMazes","TableContainer","Paper","Table","sx","minWidth","TableHead","TableRow","TableCell","align","TableBody","maze","name","date","ViewSwitch","viewSwitchStyle","render","Link","to","App","ReactDOM"],"mappings":"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","file":"static/js/main.7d65341d.chunk.js","sourcesContent":["import React from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {Auth0Provider} from '@auth0/auth0-react';\n\nconst Auth0ProviderWithHistory = ({children}) => {\n  const domain = process.env.REACT_APP_AUTH0_DOMAIN;\n  const clientId = process.env.REACT_APP_AUTH0_CLIENT_ID;\n  const audience = process.env.REACT_APP_AUTH0_AUDIENCE;\n\n  const history = useHistory();\n\n  const onRedirectCallback = (appState) => {\n    history.push(appState?.returnTo || window.location.pathname);\n  };\n\n  return (\n    <Auth0Provider\n      domain={domain}\n      clientId={clientId}\n      redirectUri={window.location.origin}\n      onRedirectCallback={onRedirectCallback}\n      audience={audience}\n    >\n      {children}\n    </Auth0Provider>\n  );\n};\n\nexport default Auth0ProviderWithHistory;\n","import React from 'react';\nconst loadingImg =\n  'https://cdn.auth0.com/blog/auth0-react-sample/assets/loading.svg';\n\nconst Loading = () => (\n  <div className=\"spinner\">\n    <img src={loadingImg} alt=\"Loading...\" />\n  </div>\n);\n\nexport default Loading;\n","import React from 'react';\nimport {Route} from 'react-router-dom';\nimport {withAuthenticationRequired} from '@auth0/auth0-react';\nimport Loading from '../components/Loading';\n\nconst ProtectedRoute = ({component, ...args}) => (\n  <Route\n    component={withAuthenticationRequired(component, {\n      onRedirecting: () => <Loading />,\n    })}\n    {...args}\n  />\n);\n\nexport default ProtectedRoute;\n","import React from 'react';\n\nimport '../grid.css';\n\nconst Node = ({row, col, isStart, isEnd, isWall, isVisited, isSolved,\n  isWeighted, onMouseDown, onMouseEnter, onMouseUp}) => {\n  const getExtraClass = () => {\n    if (isStart) return 'start-node';\n    if (isEnd) return 'end-node';\n    if (isWeighted) return 'weighted-node';\n    if (isWall) return 'wall-node';\n    if (isSolved) return 'solved-node';\n    if (isVisited) return 'visited-node';\n    return '';\n  };\n\n  return (\n    <div id={`${row}-${col}`} className={`node ${getExtraClass()}`}\n      onMouseDown={() => onMouseDown(row, col)}\n      onMouseEnter={() => onMouseEnter(row, col)}\n      onMouseUp={() => onMouseUp()}\n    >\n    </div>\n  );\n};\n\nexport default Node;\n","import axios from 'axios';\n\nconst serverUrl = process.env.REACT_APP_SERVER_URL;\nconst baseUrl = `${serverUrl}/api/mazes`;\n\n\nexport const saveMaze = async (usernameId, grid, accessToken,\n    algorithm) => {\n  const mazeObject = {\n    usernameId: usernameId,\n    mazeBoard: grid,\n    typeOfAlgorithm: algorithm,\n  };\n\n  const config = {\n    headers: {Authorization: `bearer ${accessToken}`},\n  };\n\n  const response = await axios.post(baseUrl, mazeObject, config);\n  return response.data;\n};\n\nexport const getMazesForUser = async (id, acessToken) => {\n  const config = {\n    headers: {Authorization: `bearer ${acessToken}`},\n  };\n  const response = await axios.get(`${baseUrl}/${id}`, config);\n  return response.data;\n};\n","import {generateGrid} from './gridService';\nimport {getInitialStartNodeDimensions,\n  getInitialEndNodeDimensions} from './gridService';\nimport {saveMaze} from './mazeService';\n\nexport const createNode = (row, col, START_ROW,\n    START_COL, END_ROW, END_COL) => {\n  return {\n    row: row,\n    col: col,\n    isStart: row == START_ROW && col == START_COL,\n    isEnd: row == END_ROW && col == END_COL,\n    isWall: false,\n    isVisited: false,\n    isSolved: false,\n    isWeighted: false,\n  };\n};\n\nexport const wallHandler = (row, col, grid, setGrid) => {\n  setTimeout(() => {\n    const newGrid = grid.slice();\n    const node = grid[row][col];\n    const newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[node.row][node.col] = newNode;\n    setGrid(newGrid);\n  }, 50);\n};\n\nexport const weightedNodeHandler = (row, col, grid, setGrid) => {\n  setTimeout(() => {\n    const newGrid = grid.slice();\n    const node = grid[row][col];\n    const newNode = {\n      ...node,\n      isWeighted: !node.isWeighted,\n    };\n    newGrid[node.row][node.col] = newNode;\n    setGrid(newGrid);\n  }, 50);\n};\n\nconst animateVisitedNodes =({path, visitedNodes}, grid) => {\n  for (let i = 0; i <= visitedNodes.length; i++) {\n    if (i == visitedNodes.length) {\n      setTimeout(() => {\n        animateShortestPath(path, grid);\n      }, 15 * i);\n      return;\n    }\n    setTimeout(() => {\n      const visitedNode = visitedNodes[i];\n      const currentNode = grid[visitedNode.row][visitedNode.col];\n      if (!currentNode.isStart && !currentNode.isEnd &&\n        !currentNode.isWeighted) {\n        if (!visitedNode.inQue) {\n          document\n              .getElementById(`${visitedNode.row}-${visitedNode.col}`)\n              .className = 'node visited-node';\n        } else {\n          document\n              .getElementById(`${visitedNode.row}-${visitedNode.col}`)\n              .className = 'node visited-node-in-que';\n        }\n      }\n    }, 15 * i);\n  }\n};\n\nexport const removeWeightedNodes = (grid) => {\n  const visitedNodesInQue = document.querySelectorAll('.weighted-node');\n  for (let i = 0; i < visitedNodesInQue.length; i++) {\n    visitedNodesInQue[i].classList.remove('weighted-node');\n  }\n  grid.map((row) => row.map((col) => {\n    col.isWeighted = false;\n  }));\n};\n\n\nconst animateShortestPath = (path, grid) => {\n  for (let i = 0; i < path.length; i++) {\n    const currentNode = grid[path[i][0]][path[i][1]];\n    setTimeout(() => {\n      if (!currentNode.isStart && !currentNode.isEnd) {\n        document\n            .getElementById(`${path[i][0]}-${path[i][1]}`)\n            .className = 'node solved-node';\n      }\n    }, 20 * i);\n  }\n};\n\nexport const moveNode = (previousNode, currentNode, value, grid, setGrid) => {\n  const newGrid = grid.slice();\n  // Start or end node\n  const oldNode = {\n    ...previousNode,\n    [value]: false,\n  };\n    // New start or end node\n  const newNode = {\n    ...currentNode,\n    [value]: true,\n  };\n    // newNode -> startNode\n  newGrid[currentNode.row][currentNode.col] = newNode;\n  newGrid[previousNode.row][previousNode.col] = oldNode;\n  setGrid(newGrid);\n};\n\nconst getAccessToken = async (getAccessTokenSilently) => {\n  const accessToken = await getAccessTokenSilently({\n    audience: process.env.REACT_APP_AUTH0_AUDIENCE,\n    scope: 'read:current_user',\n  });\n  return accessToken;\n};\n\nexport const solveMazeHandler = async (grid, startNode, endNode,\n    algorithmFunction, algorithm, isAuthenticated,\n    user, getAccessTokenSilently) => {\n  resetPreviousMazeHandler();\n  const visitedNodesInOrder = algorithmFunction(startNode.row, startNode.col,\n      endNode.row, endNode.col, grid);\n  if (isAuthenticated) {\n    const accessToken = await getAccessToken(getAccessTokenSilently);\n    const userId = user.sub;\n    saveMaze(userId, grid, accessToken, algorithm);\n  }\n  animateVisitedNodes(visitedNodesInOrder, grid);\n};\n\nexport const resetPreviousMazeHandler = () => {\n  // Removes visited nodes\n  const visitedNodes = document.querySelectorAll('.visited-node');\n  for (let i = 0; i < visitedNodes.length; i++) {\n    visitedNodes[i].classList.remove('visited-node');\n  }\n  removeVisitedNodesInQue();\n  removeSolvedNodes();\n};\n\nexport const resetMazeHandler = (setGrid, setStartNode, setEndNode) => {\n  // Removes visited nodes\n  const visitedNodes = document.querySelectorAll('.visited-node');\n  for (let i = 0; i < visitedNodes.length; i++) {\n    visitedNodes[i].classList.remove('visited-node');\n  }\n  removeVisitedNodesInQue();\n  removeSolvedNodes();\n  setGrid(generateGrid());\n  resetBeginningNodes(setStartNode, setEndNode);\n};\n\nconst removeVisitedNodesInQue = () => {\n  const visitedNodesInQue = document.querySelectorAll('.visited-node-in-que');\n  for (let i = 0; i < visitedNodesInQue.length; i++) {\n    visitedNodesInQue[i].classList.remove('visited-node-in-que');\n  }\n};\n\nconst resetBeginningNodes = (setStartNode, setEndNode) => {\n  setStartNode(getInitialStartNodeDimensions);\n  setEndNode(getInitialEndNodeDimensions);\n};\n\n// Removes the path of solved nodes\nconst removeSolvedNodes = () => {\n  const solvedNodes = document.querySelectorAll('.solved-node');\n  for (let i = 0; i < solvedNodes.length; i++) {\n    solvedNodes[i].classList.remove('solved-node');\n  }\n};\n","import {createNode} from './nodeService';\nconst body = document.body;\nconst html = document.documentElement;\n\nconst getHeight = () => {\n  const height = Math.max( body.scrollHeight, body.offsetHeight,\n      html.clientHeight, html.scrollHeight, html.offsetHeight );\n  return height;\n};\n\nconst getWidth = () => {\n  const width = Math.max( body.scrollWidth, body.offsetWidth,\n      html.clientWidth, html.scrollWidth, html.offsetWidth );\n  return width;\n};\n\nexport const getRows = () => {\n  const height = getHeight();\n  return Math.floor(height/ 30);\n};\n\nexport const getCols = () => {\n  const width = getWidth();\n  return Math.floor(width / 30);\n};\n\nconst ROWS = getRows();\nconst COLS = getCols();\nconst MIDDLE_ROW = Math.floor(ROWS / 2);\nconst MIDDLE_COL = Math.floor(COLS / 2);\nconst START_ROW = MIDDLE_ROW;\nconst START_COL = MIDDLE_COL - 5;\nconst END_ROW = MIDDLE_ROW;\nconst END_COL = MIDDLE_COL + 5;\n\nexport const getInitialStartNodeDimensions = () => {\n  return {row: START_ROW, col: START_COL};\n};\n\nexport const getInitialEndNodeDimensions = () => {\n  return {row: END_ROW, col: END_COL};\n};\n\n\nexport const generateGrid = () => {\n  const grid = [];\n  for (let i = 0; i < ROWS; i++) {\n    grid.push([]);\n    for (let j = 0; j < COLS; j++) {\n      grid[i].push(createNode(i, j, START_ROW, START_COL, END_ROW, END_COL));\n    }\n  }\n  return grid;\n};\n","import {getCols, getRows} from './gridService';\n\nexport const gridContainerStyle = {\n  display: 'grid',\n  gridTemplateColumns: `repeat(${getCols()}, 1fr)`,\n  gridTemplateRows: `repeat(${getRows()}, 1fr)`,\n  margin: 0,\n  height: '100%',\n  width: '100%',\n};\n","import React from 'react';\nimport {useAuth0} from '@auth0/auth0-react';\n\nconst LoginButton = () => {\n  const {loginWithRedirect} = useAuth0();\n  return (\n    <button\n      className=\"btn btn-primary btn-block\"\n      onClick={() => loginWithRedirect()}\n    >\n      Log In\n    </button>\n  );\n};\n\nexport default LoginButton;\n","import React from 'react';\nimport {useAuth0} from '@auth0/auth0-react';\n\nconst LogoutButton = () => {\n  const {logout} = useAuth0();\n  return (\n    <button\n      className=\"btn btn-danger btn-block\"\n      onClick={() =>\n        logout({\n          returnTo: window.location.origin,\n        })\n      }\n    >\n      Log Out\n    </button>\n  );\n};\n\nexport default LogoutButton;\n","import React from 'react';\n\nimport LoginButton from './LoginButton';\nimport LogoutButton from './LogoutButton';\n\nimport {useAuth0} from '@auth0/auth0-react';\n\nconst AuthenticationButton = () => {\n  const {isAuthenticated} = useAuth0();\n\n  return isAuthenticated ? <LogoutButton /> : <LoginButton />;\n};\n\nexport default AuthenticationButton;\n","import React from 'react';\nimport {Select, MenuItem,\n  InputLabel} from '@material-ui/core';\n\nconst AlgorithmSelector = ({algorithm, handleAlgorithmChange}) => {\n  return (\n    <div>\n      <InputLabel id=\"demo-simple-select-label\"\n        style={{color: 'white'}}>Algorithm</InputLabel>\n      <Select\n        renderValue={() => algorithm}\n        labelId=\"demo-simple-select-label\"\n        id=\"demo-simple-select\"\n        value={algorithm}\n        onChange={(e) => handleAlgorithmChange(e)}\n        style={{color: 'white'}}\n      >\n        <MenuItem value={'Dijkstras'}>dijkstras</MenuItem>\n        <MenuItem value={'aStar'}>aStar</MenuItem>\n      </Select>§\n    </div>\n  );\n};\n\nexport default AlgorithmSelector;\n","class Node {\n  constructor(row, col, isWall) {\n    this.id = row.toString() + '-' + col.toString();\n    this.row = row;\n    this.col = col;\n    this.isWall = isWall;\n    this.distanceFromStart = Infinity;\n    this.estimatedDistanceToEnd = Infinity;\n    this.cameFrom = null;\n    this.inQue = true;\n  }\n}\n\nexport default function aStarAlgorithm(startRow, startCol,\n    endRow, endCol, graph) {\n  // Write your code here.\n  const nodes = initializeNodes(graph);\n\n  const startNode = nodes[startRow][startCol];\n  const endNode = nodes[endRow][endCol];\n\n  startNode.distanceFromStart = 0;\n  startNode.estimatedDistanceToEnd =\n  calculateManhattanDistance(startNode, endNode);\n\n  const nodesToVisit = new MinHeap([startNode]);\n\n  while (!nodesToVisit.isEmpty()) {\n    const currentMinDistanceNode = nodesToVisit.remove();\n    currentMinDistanceNode.inQue = false;\n    if (currentMinDistanceNode === endNode) break;\n\n    const neighbors = getNeighboringNodes(currentMinDistanceNode, nodes);\n    for (const neighbor of neighbors) {\n      if (neighbor.isWall== 1) continue;\n      const tentativeDistanceToNeighbor =\n      currentMinDistanceNode.distanceFromStart + 1;\n\n      if (tentativeDistanceToNeighbor >= neighbor.distanceFromStart) continue;\n      neighbor.cameFrom = currentMinDistanceNode;\n      neighbor.distanceFromStart = tentativeDistanceToNeighbor;\n      neighbor.estimatedDistanceToEnd = tentativeDistanceToNeighbor +\n      calculateManhattanDistance(neighbor, endNode);\n\n      if (!nodesToVisit.containsNode(neighbor)) {\n        nodesToVisit.insert(neighbor);\n      } else {\n        nodesToVisit.update(neighbor);\n      }\n      // neighbor.value = 1;\n    }\n  }\n  return {path: reconstructPath(endNode),\n    visitedNodes: nodesToVisit.visitedNodes};\n}\n\nfunction initializeNodes(graph) {\n  const nodes = [];\n\n  for (const [i, row] of graph.entries()) {\n    nodes.push([]);\n    for (const [j, col] of row.entries()) {\n      const node = new Node(i, j, col.isWall);\n      nodes[i].push(node);\n    }\n  }\n  return nodes;\n}\n\nfunction calculateManhattanDistance(currentNode, endNode) {\n  const currentRow = currentNode.row;\n  const currentCol = currentNode.col;\n  const endRow = endNode.row;\n  const endCol = endNode.col;\n\n  return Math.abs(currentRow - endRow) + Math.abs(currentCol - endCol);\n}\n\nfunction getNeighboringNodes(node, nodes) {\n  const neighbors = [];\n\n  const numRows = nodes.length;\n  const numCols = nodes[0].length;\n\n  const row = node.row;\n  const col = node.col;\n\n  if (row < numRows - 1) {\n    // Down\n    neighbors.push(nodes[row + 1][col]);\n  }\n\n  if (row > 0) {\n    // UP\n    neighbors.push(nodes[row - 1][col]);\n  }\n\n  if (col < numCols - 1) {\n    // RIGHT\n    neighbors.push(nodes[row][col + 1]);\n  }\n\n  if (col > 0) {\n    // LEFT\n    neighbors.push(nodes[row][col -1]);\n  }\n\n  return neighbors;\n}\n\nfunction reconstructPath(endNode) {\n  if (endNode.cameFrom == null) return [];\n\n  let currentNode = endNode;\n  const path = [];\n\n  while (currentNode != null) {\n    path.push([currentNode.row, currentNode.col]);\n    currentNode = currentNode.cameFrom;\n  }\n\n  path.reverse();\n\n  return path;\n}\n\nclass MinHeap {\n  constructor(array) {\n    this.nodePositionsInHeap = array.reduce((obj, node, i) => {\n      obj[node.id] = i;\n      return obj;\n    }, {});\n    this.heap = this.buildHeap(array);\n    this.visitedNodes = [];\n  }\n\n  isEmpty() {\n    return this.heap.length == 0;\n  }\n\n  buildHeap(array) {\n    const firstParentIdx = Math.floor((array.length - 2) / 2);\n    for (let currentIdx = firstParentIdx; currentIdx >= 0; currentIdx--) {\n      this.siftDown(currentIdx, array.length - 1, array);\n    }\n    return array;\n  }\n\n  siftDown(currentIdx, endIdx, heap) {\n    let childOneIdx = currentIdx * 2 + 1;\n    while (childOneIdx <= endIdx) {\n      const childTwoIdx = currentIdx * 2 + 2 <= endIdx ?\n      currentIdx * 2 + 2 : -1;\n      let idxToSwap;\n      if (childTwoIdx !== -1 && heap[childTwoIdx].estimatedDistanceToEnd <\n        heap[childOneIdx].estimatedDistanceToEnd) {\n        idxToSwap = childTwoIdx;\n      } else {\n        idxToSwap = childOneIdx;\n      }\n      if (heap[idxToSwap].estimatedDistanceToEnd <\n        heap[currentIdx].estimatedDistanceToEnd) {\n        this.swap(currentIdx, idxToSwap, heap);\n        currentIdx = idxToSwap;\n        childOneIdx = currentIdx * 2 + 1;\n      } else {\n        return;\n      }\n    }\n  }\n\n  siftUp(currentIdx, heap) {\n    let parentIdx = Math.floor((currentIdx - 1) / 2);\n    while (currentIdx > 0 && heap[currentIdx].estimatedDistanceToEnd <\n        heap[parentIdx].estimatedDistanceToEnd) {\n      this.swap(currentIdx, parentIdx, heap);\n      currentIdx = parentIdx;\n      parentIdx = Math.floor((currentIdx - 1) / 2);\n    }\n  }\n\n  remove() {\n    if (this.isEmpty()) return;\n\n    this.swap(0, this.heap.length - 1, this.heap);\n    const node = this.heap.pop();\n    delete this.nodePositionsInHeap[node.id];\n    this.siftDown(0, this.heap.length - 1, this.heap);\n    return node;\n  }\n\n  insert(node) {\n    this.visitedNodes.push(node);\n    this.heap.push(node);\n    this.nodePositionsInHeap[node.id] = this.heap.length - 1;\n    this.siftUp(this.heap.length - 1, this.heap);\n  }\n\n  swap(i, j, heap) {\n    this.nodePositionsInHeap[this.heap[i].id] = j;\n    this.nodePositionsInHeap[this.heap[j].id] = i;\n    const temp = heap[j];\n    heap[j] = heap[i];\n    heap[i] = temp;\n  }\n\n  containsNode(node) {\n    return node.id in this.nodePositionsInHeap;\n  }\n\n  update(node) {\n    this.siftUp(this.nodePositionsInHeap[node.id], this.heap);\n  }\n}\n","export default function dijkstrasAlgorithm(startRow, startCol,\n    endRow, endCol, graph) {\n  const visitedNodes = [];\n  const nodes = initializeNodes(graph);\n\n  const startNode = nodes[startRow][startCol];\n  const endNode = nodes[endRow][endCol];\n\n  startNode.distance = 0;\n\n  const unexploredNodes = new MinHeap([startNode]);\n\n  while (!unexploredNodes.isEmpty()) {\n    const currentNode = unexploredNodes.remove();\n    currentNode.isVisited = true;\n    currentNode.inQue = false;\n\n    if (currentNode === endNode) {\n      return {path: reconstructPath(endNode).reverse(),\n        visitedNodes: visitedNodes};\n    }\n\n    const neighbours = getNeighbouringNodes(currentNode, nodes);\n\n    for (let i = 0; i < neighbours.length; i++) {\n      const neighbour = neighbours[i];\n      if (neighbour.isWall || neighbour.isVisited) continue;\n      updateNeighbourDistance(currentNode, neighbour, unexploredNodes,\n          visitedNodes);\n    }\n  }\n}\n\nfunction reconstructPath(node) {\n  const path = [];\n  let tempNode = node;\n\n  while (tempNode !== null) {\n    path.push([tempNode.row, tempNode.col]);\n    tempNode = tempNode.previousNode;\n  }\n  return path;\n}\n\nfunction updateNeighbourDistance(node, neighbour, unexploredNodes,\n    visitedNodes) {\n  const currentNeighbourDistance = node.distance + neighbour.weight;\n  if (currentNeighbourDistance < neighbour.distance) {\n    neighbour.distance = currentNeighbourDistance;\n    neighbour.previousNode = node;\n    if (unexploredNodes.containsNode(neighbour)) {\n      unexploredNodes.update(neighbour);\n    } else {\n      unexploredNodes.insert(neighbour);\n    }\n    visitedNodes.push(neighbour);\n  }\n}\n\nfunction getNeighbouringNodes(node, graph) {\n  const row = node.row;\n  const col = node.col;\n\n  const neighbours = [];\n\n  if (row > 0) {\n    neighbours.push(graph[row - 1][col]);\n  }\n\n  if (row < graph.length - 1) {\n    neighbours.push(graph[row + 1][col]);\n  }\n\n  if (col > 0) {\n    neighbours.push(graph[row][col - 1]);\n  }\n\n  if (col < graph[0].length - 1) {\n    neighbours.push(graph[row][col + 1]);\n  }\n  return neighbours;\n}\n\nfunction initializeNodes(graph) {\n  const nodes = [];\n  for (let i = 0; i < graph.length; i++) {\n    nodes.push([]);\n    for (let j = 0; j < graph[0].length; j++) {\n      const currentNode = graph[i][j];\n      const newNode = {\n        ...currentNode,\n        distance: Infinity,\n        previousNode: null,\n        weight: currentNode.isWeighted ? 5 : 1,\n        inQue: true,\n        id: currentNode.row.toString() + '-' + currentNode.col.toString(),\n      };\n      nodes[i].push(newNode);\n    }\n  }\n  return nodes;\n}\n\n\nclass MinHeap {\n  constructor(array) {\n    this.nodePositionsInHeap = array.reduce((obj, node, i) => {\n      obj[node.id] = i;\n      return obj;\n    }, {});\n    this.heap = this.buildHeap(array);\n    this.visitedNodes = [];\n  }\n\n  isEmpty() {\n    return this.heap.length == 0;\n  }\n\n  buildHeap(array) {\n    const firstParentIdx = Math.floor((array.length - 2) / 2);\n    for (let currentIdx = firstParentIdx; currentIdx >= 0; currentIdx--) {\n      this.siftDown(currentIdx, array.length - 1, array);\n    }\n    return array;\n  }\n\n  siftDown(currentIdx, endIdx, heap) {\n    let childOneIdx = currentIdx * 2 + 1;\n    while (childOneIdx <= endIdx) {\n      const childTwoIdx = currentIdx * 2 + 2 <= endIdx ?\n        currentIdx * 2 + 2 : -1;\n      let idxToSwap;\n      if (childTwoIdx !== -1 && heap[childTwoIdx].distance <\n          heap[childOneIdx].distance) {\n        idxToSwap = childTwoIdx;\n      } else {\n        idxToSwap = childOneIdx;\n      }\n      if (heap[idxToSwap].distance <\n          heap[currentIdx].distance) {\n        this.swap(currentIdx, idxToSwap, heap);\n        currentIdx = idxToSwap;\n        childOneIdx = currentIdx * 2 + 1;\n      } else {\n        return;\n      }\n    }\n  }\n\n  siftUp(currentIdx, heap) {\n    let parentIdx = Math.floor((currentIdx - 1) / 2);\n    while (currentIdx > 0 && heap[currentIdx].distance <\n          heap[parentIdx].distance) {\n      this.swap(currentIdx, parentIdx, heap);\n      currentIdx = parentIdx;\n      parentIdx = Math.floor((currentIdx - 1) / 2);\n    }\n  }\n\n  remove() {\n    if (this.isEmpty()) return;\n\n    this.swap(0, this.heap.length - 1, this.heap);\n    const node = this.heap.pop();\n    delete this.nodePositionsInHeap[node.id];\n    this.siftDown(0, this.heap.length - 1, this.heap);\n    return node;\n  }\n\n  insert(node) {\n    this.visitedNodes.push(node);\n    this.heap.push(node);\n    this.nodePositionsInHeap[node.id] = this.heap.length - 1;\n    this.siftUp(this.heap.length - 1, this.heap);\n  }\n\n  swap(i, j, heap) {\n    this.nodePositionsInHeap[this.heap[i].id] = j;\n    this.nodePositionsInHeap[this.heap[j].id] = i;\n    const temp = heap[j];\n    heap[j] = heap[i];\n    heap[i] = temp;\n  }\n\n  containsNode(node) {\n    return node.id in this.nodePositionsInHeap;\n  }\n\n  update(node) {\n    this.siftUp(this.nodePositionsInHeap[node.id], this.heap);\n  }\n}\n","import aStarAlgorithm from './Algorithms/astar';\nimport dijkstrasAlgorithm from './Algorithms/dijkstras';\n\nexport const aStar = (startRow, startCol, endRow, endCol, graph) => {\n  return aStarAlgorithm(startRow, startCol, endRow, endCol, graph);\n};\n\nexport const dijkstras = (startRow, startCol, endNodeRow, endNodeCol, grid) => {\n  return dijkstrasAlgorithm(startRow, startCol, endNodeRow, endNodeCol, grid);\n};\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport {aStar, dijkstras} from '../../services/algorithmService';\n\nconst getAlgorithmFunction = (algorithm) => {\n  if (algorithm === 'Dijkstras') return dijkstras;\n  if (algorithm === 'aStar') return aStar;\n};\n\nconst GridInterfaceButtons = ({algorithm,\n  solveMazeHandler, resetMazeHandler}) => {\n  return (\n    <div>\n      <Button\n        variant='contained'\n        color='primary'\n        onClick={() => solveMazeHandler(getAlgorithmFunction(algorithm))}\n        className=\"solve-maze-button\"\n      >\n            Solve\n      </Button>\n      <Button\n        variant='contained'\n        color='secondary'\n        onClick={() => resetMazeHandler()}\n        className=\"solve-maze-button\"\n      >\n              Reset\n      </Button>\n    </div>\n  );\n};\n\nexport default GridInterfaceButtons;\n","import React from 'react';\nimport {Checkbox, FormControlLabel, FormGroup} from '@material-ui/core';\n\nconst GridInterfaceWeightedNodes = ({weightedNodeHandler, algorithm}) => {\n  if (algorithm !== 'Dijkstras') {\n    return null;\n  }\n  return (\n    <div>\n      <FormGroup>\n        <FormControlLabel style={{color: 'white', textColor: 'white'}}\n          control={<Checkbox\n            style={{color: 'white', textColor: 'white'}}\n          />}\n          label=\"Weighted node\"\n          onChange={() => weightedNodeHandler()} />\n      </FormGroup>\n    </div>\n  );\n};\n\nexport default GridInterfaceWeightedNodes;\n","import React from 'react';\nimport Draggable from 'react-draggable';\n\nimport AuthenticationButton from '../AuthenticationButton';\nimport AlgorithmSelector from './AlgorithmSelector';\nimport GridInterfaceButtons from './GridInterfaceButtons';\nimport GridInterfaceWeightedNodes from './GridInterfaceWeightedNodes';\n// import NavBar from '../NavBar';\n\nconst gridInterfaceStyle = {\n  height: 200,\n  width: 200,\n  border: '1px solid black',\n  position: 'absolute',\n  backgroundColor: 'black',\n  opacity: 0.7,\n  top: 0,\n};\n\nconst GridInterface = ({solveMazeHandler, resetMazeHandler,\n  weightedNode, setWeightedNode, removeWeightedNodes, algorithm,\n  setAlgorithm, grid}) => {\n  const handleAlgorithmChange = (event) => {\n    if (event.target.value !== 'Dijkstras') {\n      removeWeightedNodes(grid);\n    }\n    setAlgorithm(event.target.value);\n  };\n\n  const weightedNodeHandler = () => {\n    setWeightedNode(!weightedNode);\n  };\n\n  return (\n    <div>\n      <Draggable>\n        <div style={gridInterfaceStyle}>\n          <div style={{color: 'white'}}>\n        Hiteshs PathFindingVisualizer\n          </div>\n          <AlgorithmSelector\n            algorithm={algorithm}\n            handleAlgorithmChange={handleAlgorithmChange}\n          />\n          <AuthenticationButton />\n          <GridInterfaceButtons\n            algorithm={algorithm}\n            solveMazeHandler={solveMazeHandler}\n            resetMazeHandler={resetMazeHandler}\n          />\n          <GridInterfaceWeightedNodes\n            weightedNodeHandler={weightedNodeHandler} algorithm={algorithm}\n          />\n        </div>\n      </Draggable>\n    </div>\n  );\n};\n\nexport default GridInterface;\n","import {moveNode, wallHandler, weightedNodeHandler} from '../nodeService';\n\nexport const handleMouseDown = (row, col, grid, setGrid,\n    setMousePressed, setStartNodeSelected, setEndNodeSelected,\n    weightedNode) => {\n  const currentNode = grid[row][col];\n  setMousePressed(true);\n  // Check if start node is selected\n  if (currentNode.isStart) {\n    // setStartNode({row: row, col: col});\n    setStartNodeSelected(true);\n  } else if (currentNode.isEnd) {\n    setEndNodeSelected(true);\n  } else if (weightedNode) {\n    weightedNodeHandler(row, col, grid, setGrid);\n  } else {\n    wallHandler(row, col, grid, setGrid);\n  }\n};\n\nexport const handleMouseEnter = async (row, col, grid, setGrid, mouseIsPressed,\n    startNodeSelected, endNodeSelected,\n    setStartNode, startNode, setEndNode, endNode,\n    weightedNode) => {\n  if (!mouseIsPressed) return;\n  // Check if start node is selected\n  const currentNode = grid[row][col];\n  if (startNodeSelected) {\n    // replace the start node\n    const previousStartNode = grid[startNode.row][startNode.col];\n    moveNode(previousStartNode, currentNode, 'isStart', grid, setGrid);\n    setStartNode({row: row, col: col});\n  } else if (endNodeSelected) {\n    const previousNode = grid[endNode.row][endNode.col];\n    moveNode(previousNode, currentNode, 'isEnd', grid, setGrid);\n    setEndNode({row: row, col: col});\n  } else if (weightedNode) {\n    weightedNodeHandler(row, col, grid, setGrid);\n  } else {\n    wallHandler(row, col, grid, setGrid);\n  }\n};\n\nexport const handleMouseUp = (setStartNodeSelected, setEndNodeSelected,\n    setMousePressed) => {\n  setStartNodeSelected(false);\n  setEndNodeSelected(false);\n  setMousePressed(false);\n};\n","import React, {useEffect, useState} from 'react';\n\nimport Node from './Node';\nimport '../grid.css';\nimport {generateGrid,\n  getInitialStartNodeDimensions,\n  getInitialEndNodeDimensions,\n} from '../services/gridService';\nimport {gridContainerStyle} from '../services/styleService';\nimport GridInterface from './GridInterface/GridInterface';\nimport {solveMazeHandler,\n  resetMazeHandler, removeWeightedNodes} from '../services/nodeService';\nimport {handleMouseDown, handleMouseEnter,\n  handleMouseUp} from '../services/eventHandlers/PathFindingVisualizerHandler';\n\nimport {useAuth0} from '@auth0/auth0-react';\n\nconst PathFindingVisualizer = () => {\n  const {isAuthenticated, user, getAccessTokenSilently} = useAuth0();\n  const [grid, setGrid] = useState(generateGrid());\n  const [mouseIsPressed, setMousePressed] = useState(false);\n  const [startNodeSelected, setStartNodeSelected] = useState(false);\n  const [startNode, setStartNode] = useState(getInitialStartNodeDimensions);\n  const [endNodeSelected, setEndNodeSelected] = useState(false);\n  const [endNode, setEndNode] = useState(getInitialEndNodeDimensions);\n  const [weightedNode, setWeightedNode] = useState(false);\n  const [algorithm, setAlgorithm] = useState('Dijkstras');\n\n  useEffect(() => {\n    if (algorithm !== 'Dijkstras') {\n      setWeightedNode(false);\n    }\n  }, [algorithm]);\n\n  return (\n    <div style={gridContainerStyle}>\n      { grid.map((row, rowIdx) => row.map((node, colIdx) => {\n        const {row, col, isStart, isEnd,\n          isWall, isVisited, isSolved, isWeighted} = node;\n        return (\n          <div key={`${rowIdx}-${colIdx}`}>\n            <Node\n              row={row}\n              col={col}\n              isStart={isStart}\n              isEnd={isEnd}\n              isWall={isWall}\n              isVisited={isVisited}\n              isSolved={isSolved}\n              mouseIsPressed={mouseIsPressed}\n              isWeighted={isWeighted}\n              onMouseDown={(row, col) => handleMouseDown(row, col, grid,\n                  setGrid, setMousePressed, setStartNodeSelected,\n                  setEndNodeSelected, weightedNode)}\n              onMouseEnter={(row, col) => handleMouseEnter(row, col, grid,\n                  setGrid, mouseIsPressed, startNodeSelected, endNodeSelected,\n                  setStartNode, startNode, setEndNode, endNode, weightedNode)}\n              onMouseUp={() => handleMouseUp(setStartNodeSelected,\n                  setEndNodeSelected, setMousePressed)}\n            />\n          </div>\n        );\n      }))}\n      <div>\n        <GridInterface\n          solveMazeHandler={(algorithmFunction) =>\n            solveMazeHandler(grid, startNode,\n                endNode, algorithmFunction, algorithm, isAuthenticated, user,\n                getAccessTokenSilently)}\n          resetMazeHandler={() => resetMazeHandler(setGrid,\n              setStartNode, setEndNode)}\n          weightedNode={weightedNode}\n          setWeightedNode={setWeightedNode}\n          removeWeightedNodes={removeWeightedNodes}\n          algorithm={algorithm}\n          setAlgorithm={setAlgorithm}\n          grid={grid}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default PathFindingVisualizer;\n","import React, {useState, useEffect} from 'react';\nimport {useAuth0} from '@auth0/auth0-react';\nimport {getMazesForUser} from '../services/mazeService';\n\nimport {TableContainer, Table, TableHead, TableRow,\n  TableCell, TableBody, Paper} from '@material-ui/core';\n\nconst Mazes = () => {\n  const {user, isAuthenticated, isLoading, getAccessTokenSilently} = useAuth0();\n  const [mazes, setMazes] = useState([]);\n\n  useEffect( async () => {\n    const acessToken = await getAccessTokenSilently();\n    const response = await getMazesForUser(user.sub, acessToken);\n    setMazes(response);\n  }, []);\n\n  if (isLoading) {\n    return (\n      <div>Laoding..</div>\n    );\n  }\n\n  return isAuthenticated && (\n    <TableContainer component={Paper}>\n      <Table sx={{minWidth: 650}} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>UsernameId</TableCell>\n            <TableCell align=\"right\">Date&nbsp;(g)</TableCell>\n            <TableCell align=\"right\">Type of algorithm&nbsp;(g)</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {mazes.map((maze) => (\n            <TableRow\n              key={maze.id}\n              sx={{'&:last-child td, &:last-child th': {border: 0}}}\n            >\n              <TableCell component=\"th\" scope=\"row\">\n                {maze.name}\n              </TableCell>\n              <TableCell align=\"right\">{maze.usernameId}</TableCell>\n              <TableCell align=\"right\">{maze.date}</TableCell>\n              <TableCell align=\"right\">{maze.typeOfAlgorithm}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n\n  );\n};\n\nexport default Mazes;\n","import React from 'react';\nimport {Button} from '@material-ui/core';\nimport {Route} from 'react-router-dom';\n\nimport {Switch} from 'react-router-dom';\nimport ProtectedRoute from './ProtectedRoute';\nimport {Link} from 'react-router-dom';\nimport Draggable from 'react-draggable';\n\nimport PathFindingVisualizer from './PathFindingVisualizer';\nimport Mazes from './Mazes';\n\nconst ViewSwitch = () => {\n  const viewSwitchStyle = {\n    height: 50,\n    width: 158,\n    border: '1px solid black',\n    position: 'absolute',\n    backgroundColor: 'red',\n    opacity: 0.7,\n    top: 0,\n  };\n\n\n  return (\n    <div>\n      <Route\n        path='/'\n        render={(history) => (\n          <Draggable>\n            <div style={viewSwitchStyle}>\n              <Button\n                label='Home'\n                value=\"/\"\n                component={Link}\n                to=\"/\"\n                color=\"primary\"\n                variant=\"contained\"\n              >Home</Button>\n              <Button\n                label='Mazes'\n                value='/mazes'\n                component={Link}\n                to='/mazes'\n                color=\"primary\"\n                variant=\"contained\"\n              >\n                    Mazes\n              </Button>\n            </div>\n          </Draggable>\n        )}\n      />\n      <Switch>\n        <ProtectedRoute path=\"/mazes\" component={Mazes} />\n        <Route path=\"/\" component={PathFindingVisualizer} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default ViewSwitch;\n","import React from 'react';\n// import PathFindingVisualizer from './components/PathFindingVisualizer';\nimport ViewSwitch from './components/ViewSitch';\nimport {useAuth0} from '@auth0/auth0-react';\nimport Loading from './components/Loading';\n\nfunction App() {\n  const {isLoading} = useAuth0();\n\n  if (isLoading) {\n    return <Loading />;\n  }\n  return (\n    <ViewSwitch />\n  );\n}\nexport default App;\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport Auth0ProviderWithHistory from './auth/auth0-provider-with-history';\nimport App from './App';\n\nReactDOM.render(\n    <Router>\n      <Auth0ProviderWithHistory>\n        <App />\n      </Auth0ProviderWithHistory>\n    </Router>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}